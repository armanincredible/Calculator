DEF_CMD(-1, ERROR, 0, return 0;)

DEF_CMD(0, HLT, 0,break;)

DEF_CMD(1, PUSH, 1,
        elem_t value = array [amount + 1];
        amount += 2;
        stack_push (stack, value);)

DEF_CMD(2, POP, 0,
        elem_t variable = 0;
        stack_pop (stack, &variable);
        amount++;)

DEF_CMD(3, POPARG, 1,
        elem_t variable = 0;
        stack_pop (stack, &variable);
        amount++;)

DEF_CMD(4, ADD, 0,
        elem_t fr_var = 0;
        elem_t sec_var = 0;
        stack_pop (stack, &fr_var);
        stack_pop (stack, &sec_var);

        stack_push (stack, fr_var + sec_var);

        amount++;)

DEF_CMD(5, SUB, 0,
        elem_t fr_var = 0;
        elem_t sec_var = 0;
        stack_pop (stack, &fr_var);
        stack_pop (stack, &sec_var);

        stack_push (stack, fr_var + sec_var);
                
        amount++;)

DEF_CMD(6, MUL, 0,
        elem_t fr_var = 0;
        elem_t sec_var = 0;
        stack_pop (stack, &fr_var);
        stack_pop (stack, &sec_var);

        stack_push (stack, fr_var * sec_var);

        amount++;)

DEF_CMD(7, DIV, 0,
        elem_t fr_var = 0;
        elem_t sec_var = 0;
        stack_pop (stack, &fr_var);
        stack_pop (stack, &sec_var);

        stack_push (stack, fr_var / sec_var); 

        amount++;)

DEF_CMD(8, OUT, 0,
        printf ("%d\n", stack_top (stack));
        amount++;)

DEF_CMD(9, IN, 0,
        scanf ("%d", &input_value);
        amount ++;)
